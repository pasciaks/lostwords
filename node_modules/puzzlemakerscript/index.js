/**
 * lostwords
 * 
 * Written By: Sheldon Pasciak, 2017 
 * 
 * */
var Copyright = "Sheldon Pasciak";

var PuzzleMakerScript = { 

    Owner: Copyright,
    thePuzzle: "",
    cols: 0,
    rows: 0,
    sx: 0,
    sy: 0,
    dx: 0,
    dy: 0,
    letterSet: "",

    addWord: function(word, howManyTimes, dx, dy, howManyAttempts) {

        if (typeof howManyTimes == 'undefined') howManyTimes = 1;        
        if (typeof howManyAttempts == 'undefined') howManyAttempts = 999;

        var wordsAdded = 0;
        
        var theWordsAdded = [];

        for (var j = 0; j < howManyAttempts; j++) {

            this.sx = Math.floor(Math.random() * (this.cols - 1 - 0 + 1)) + 0; //randRange(0, PuzzleMakerScript.cols - 1);
            this.sy = Math.floor(Math.random() * (this.rows - 1 - 0 + 1)) + 0; //randRange(0, PuzzleMakerScript.rows - 1);

            this.dx = 1 - Math.floor(Math.random() * (2 - 1 - 0 + 1)) + 0;
            this.dy = 1 - Math.floor(Math.random() * (2 - 1 - 0 + 1)) + 0;

            if (this.dx == 0)
                if (this.dy == 0) this.dx = 1;
                
                if (typeof dx!='undefined') this.dx=dx;
                if (typeof dy!='undefined') this.dy=dy;

            if (wordsAdded < howManyTimes) {
                if (this.checkDirection(this.sx, this.sy, this.dx, this.dy, word, false) == true) {
                    this.setDirection(this.sx, this.sy, this.dx, this.dy, word, function(data) {
                        wordsAdded++;
                        theWordsAdded.push(word);
                    });
                }
            }

        }

        return theWordsAdded;

    },

    /**
     * Creates and Does Something here...
     * 
     * @param   {int}           cols            column count
     * @param   {Function}      [callback]      Optional callback  
     * @returns {Object}        results         These are the results from the mysql library
     */
    checkDirection: function(sx, sy, dx, dy, word, reuseLetters) {

        for (var i = 0; i < word.length; i++) {
            if ((this.get(sx, sy) == ' ') || (this.get(sx, sy) == word[i])) {
                if (!reuseLetters)
                    if (this.get(sx, sy) == word[i]) return false; //option to only allow unique unshared letter hides
            }
            else {
                return false;

            }

            if (sx < 0) return false;
            if (sx > this.cols - 1) return false;
            if (sy < 0) return false;
            if (sy > this.rows - 1) return false;

            sx += dx;
            sy += dy;
        }

        return true;
    },
    createLetterSet: function() {

        var commonLetters = ["E",
            "T",
            "A",
            "O",
            "I",
            "N",
            "S",
            "R",
            "H",
            "D",
            "L",
            "U",
            "C",
            "M",
            "F",
            "Y",
            "W",
            "G",
            "P",
            "B",
            "V",
            "K",
            "X",
            "Q",
            "J",
            "Z"
        ];

        var letterFrequency = [1202,
            910,
            812,
            768,
            731,
            695,
            628,
            602,
            592,
            432,
            398,
            288,
            271,
            261,
            230,
            211,
            209,
            203,
            182,
            149,
            111,
            69,
            17,
            11,
            10,
            7
        ];

        var letterChoices = "";

        this.letterSet = "";

        for (var i = 0; i < 26; i++) {
            for (var j = 0; j < letterFrequency[i]; j++) {
                letterChoices = letterChoices + commonLetters[i];
            }

        }

        this.letterSet = this.scramble(letterChoices);

        return letterChoices;
    },
    /**
     * todo: future hide directions, instead of straight line.
     * 
     * bends
     * 
     * right,left turns
     * 
     * lostwords world style boggle variation
     * 
     * */
    createPath: function(sx, sy, dx, dy, word) {

    },
    fillBlanks: function(fillWith) {
        
    if (typeof fillWith=='undefined') fillWith=this.letterSet;
        
    for (var r = 0; r < this.rows; r++) {
        for (var c = 0; c < this.cols; c++) {
        if (this.get(c,r)==' ') this.set(c,r,fillWith.charAt(Math.floor(Math.random()*fillWith.length)));
        }
    }        
        
    },
    get: function(col, row) {
        return this.thePuzzle[(col + row * this.cols)];
    },
    init: function(cols, rows, callback) {

        this.cols = cols;
        this.rows = rows;

        this.thePuzzle = "";

        for (var j = 0; j < rows; j++) {
            for (var i = 0; i < cols; i++) {
                this.thePuzzle += " ";
            }
        }
        
        this.createLetterSet();

        if (typeof callback != 'undefined') callback(this.thePuzzle);
    },
    scramble: function(str) {

        var scrambled = '',
            src = str.split(''),
            randomNum;

        while (src.length > 1) {
            randomNum = Math.floor(Math.random() * src.length);
            scrambled += src[randomNum];
            src.splice(randomNum, 1);
        }

        scrambled += src[0];

        return scrambled;


    },

    set: function(col, row, character) {
        var location = (col + row * this.cols);
        this.thePuzzle = this.thePuzzle.substr(0, location) + character + this.thePuzzle.substr(location + 1);
    },
    setDirection: function(sx, sy, dx, dy, word, cb) {

        for (var i = 0; i < word.length; i++) {
            this.set(sx, sy, word[i]);
            sx += dx;
            sy += dy;
        }

        if (typeof cb != 'undefined') cb(this.thePuzzle);
    },
    show: function() {

        var line = "";

        for (var r = 0; r < this.rows; r++) {
            for (var c = 0; c < this.cols; c++) {
                line += this.get(c, r) + " ";
            }
            console.log(line);
            line = "";
        }

        console.log(this.Owner);
    }
    
};

module.exports = PuzzleMakerScript;
